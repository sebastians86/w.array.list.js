Array.prototype.add = function (e) { var t = this.type; if (typeof t === "undefined") this.type = typeof e; else if (this.type !== typeof e && e !== null) throw 'Item is of type "' + typeof e + '," but this array is composed of "' + this.type + '" type objects.'; this.push(e) }; Array.prototype.addRange = function (e) { var t = this; if (e !== undefined) { e.foreach(function (e) { t.add(e) }) } return t }; Array.prototype.any = function () { return this.length > 0 }; Array.prototype.clear = function () { this = [] }; Array.prototype.count = function () { return this.length }; Array.prototype.distinct = function (e) { var t = []; var n = this; for (var r = 0; r < n.length; r++) { if (typeof e === "function" && e(n[r]) || n[r] === e) { if (typeof e === "function" && e(n[r])) { if (t.findIndex(function (t) { return t == e(n[r]) }) == -1) t.add(e(n[r])) } } else if (typeof e === "undefined") { if (t.findIndex(function (e) { return e == n[r] }) == -1) t.add(n[r]) } } return t }; Array.prototype.find = function (e) { var t; var n = this; for (var r = 0; r < n.length; r++) { if (typeof e === "function" && e(n[r]) || n[r] === e) { t = n[r]; break } } return t }; Array.prototype.findAll = function (e) { var t = []; var n = this; for (var r = 0; r < n.length; r++) { if (typeof e === "function" && e(n[r]) || n[r] === e) t.add(n[r]) } return t }; Array.prototype.findIndex = function (e) { var t = -1; var n = this; for (var r = 0; r < n.length; r++) { if (typeof e === "function" && e(n[r]) || n[r] === e) { t = r; break } } return t }; Array.prototype.first = function () { var e; if (this.length > 0) e = this[0]; return e }; Array.prototype.foreach = function (e) { for (var t = 0; t < this.length; t++) { if (typeof e === "function") { var n = e(this[t], t); if (n) break } } }; Array.prototype.last = function () { var e; if (this.length > 0) e = this[this.length - 1]; return e }; Array.prototype.longCount = function (e) { var t = 0; var n = this; for (var r = 0; r < n.length; r++) { if (typeof e === "function" && e(n[r]) || n[r] === e) t++ } return t }; Array.prototype.orderBy = function (e) { var t = this; var n = []; var r = this.utility.getCompare(this, arguments); for (var i = 0; i < t.length; i++) n.push(t[i]); n.sort(r); return n }; Array.prototype.removeAll = function (e) { var t = []; var n = this; for (var r = 0; r < n.length; r++) { if (typeof e === "function" && e(n[r]) || n[r] === e) { } else t.add(n[r]) } return t }; Array.prototype.removeAt = function (e) { var t = []; var n = this; console.log(n); for (var r = 0; r < n.length; r++) if (r !== e) t.push(n[r]); return t }; Array.prototype.take = function (e, t) { var n = []; var r = this; t = t !== undefined ? t : 0; for (var i = t; i < e + t; i++) { if (i < r.length) n.add(r[i]); else break } return n }; Array.prototype.type = undefined; Array.prototype.utility = { compareType: { ASC: 1, DESC: 2 }, getCompare: function () { var e = [], t = [], n = []; var r; var i = arguments.length > 1 ? arguments[1] : []; var s = arguments[0]; for (var o = 0; o < i.length; o++) { var u = i[o].del; var a = i[o].type !== undefined ? i[o].type : Array.SortType.ASC; var f; if (typeof u === "function") { f = function (e, t, n, r) { var i = s.utility.getSortValue(n(e)); var o = s.utility.getSortValue(n(t)); if (i < o) return r === Array.SortType.ASC ? -1 : 1; if (i > o) return r === Array.SortType.ASC ? 1 : -1; return 0 } } else if (typeof u === "string") { f = function (e, t, n, r) { var i = s.utility.getSortValue(e[n]); var o = s.utility.getSortValue(t[n]); if (i < o) return r === Array.SortType.ASC ? -1 : 1; if (i > o) return r === Array.SortType.ASC ? 1 : -1; return 0 } } if (f !== undefined) { e.push(f); t.push(u); n.push(a) } } if (e.length > 0) { r = function (r, i) { var s = 0; for (var o = 0; o < e.length; o++) { s = e[o](r, i, t[o], n[o]); if (s !== 0) break } return s } } else { var a; if (i.length === 1) { if (typeof i[0] === "number") a = i[0]; else a = Array.SortType.ASC } else a = Array.SortType.ASC; if (a === Array.SortType.DESC) { r = function (e, t) { if (e > t) return -1; if (e < t) return 1; return 0 } } else { r = function (e, t) { if (e < t) return -1; if (e > t) return 1; return 0 } } } return r }, getSortValue: function (e) { if (typeof e === "number") return parseFloat(e); else if (typeof e === "string") return e.toString(); return e } }; Array.SortType = { ASC: 1, DESC: 2 }